#!/usr/bin/env python

'''
Uses matplotlib to plot PID input, output, and setpoints.

Requires a log file with some lines in the following format:
[unix_time] [robot_uptime] [robot_iteration] [event_type] [input] [output] [setpoint]
(in truth, the unix_time and robot_iteration aren't used, so placeholders are OK)
'''

import argparse
import csv
import os
import re
import sys

import numpy as np
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt

def get_nonzero_logs(absdir):
	return [f for f in os.listdir(absdir)
			if re.match(r'log_[\d-]+_\d+', f)
			and os.stat(os.path.join(absdir, f)).st_size > 0]

def get_latest_log(absdir):
	return sorted(get_nonzero_logs(absdir))[-1]

def get_latest_run_logs(absdir):
	pref_match = re.match(r'(log_[\d-]+_)\d+', get_latest_log(absdir))
	if pref_match:
		return sorted([f for f in get_nonzero_logs(absdir)
				if re.match(pref_match.group(1), f)])

def parse_file(fname):
	vt, vi, vo, vs = [], [], [], []
	try:
		if os.stat(fname).st_size < 1:
			print('Empty log file {}'.format(fname))
		with open(fname, 'rb') as f:
			reader = csv.reader(f, delimiter='\t')
			for line, row in enumerate(reader, start=1):
				match = re.search(sys.argv[2], str(row))
				if match:
					try:
						float(row[1])
						float(row[4])
						float(row[5])
						float(row[6])
					except ValueError:
						print('Malformed line {} excluded'.format(line))
						continue
					if len(vt) > 0 and float(row[1]) < vt[-1]:
						print('Anachronistic line {} excluded'.format(line))
						continue
					vt.append(float(row[1]))
					vi.append(float(row[4]))
					vo.append(float(row[5]))
					vs.append(float(row[6]))
		return (vt, vi, vo, vs)
	except EnvironmentError:
		print('File {} not accessible'.format(fname))
		return None

def plot(vt, vi, vo, vs, output_image=None):
	fig, ax1 = plt.subplots()
	ax1.set_xlabel('time (s)')

	ax1.plot(vt, vi, 'b-')
	ax1.plot(vt, vs, 'c--')
	ax1.set_ylabel('input', color='b')
	for tl in ax1.get_yticklabels():
		tl.set_color('b')

	ax2 = ax1.twinx()
	ax2.plot(vt, vo, 'r-')
	ax2.set_ylabel('output', color='r')
	for tl in ax2.get_yticklabels():
		tl.set_color('r')
	
	#plt.grid(b=True, which='both', axis='x', linestyle='-', linewidth=1)
	ax1.xaxis.grid(True, which='both')

	plt.legend(handles=[
		mpatches.Patch(color='b', label='input'),
		mpatches.Patch(color='c', label='setpoint'),
		mpatches.Patch(color='r', label='output'),
	])

	if output_image:
		plt.savefig(output_image)
	else:
		plt.show()

def main():
	# Parse arguments
	aparser = argparse.ArgumentParser(description='Plot PID data from a log file.')
	aparser.add_argument('-e',
			required=True,
			type=str,
			#metavar='EVENT',
			help='the event type of the plotted events log file (can be partial)')
	aparser.add_argument('-o',
			action='store_true',
			help='save output image to ./plots/ instead of showing in a GUI')

	# Log input subparser
	fparser = aparser.add_mutually_exclusive_group(required=True)
	fparser.add_argument('-f',
			nargs='+',
			#type=file,
			help='the log file(s) to plot')
	fparser.add_argument('-l',
			action='store_true',
			help='plot latest log file from ./logs/')
	fparser.add_argument('-L',
			action='store_true',
			help='plot all log files from latest run from ./logs/')

	args = aparser.parse_args()

	# Files to plot
	files = []
	if args.f:
		files.extend(args.f)
	elif args.l or args.L:
		logdir = os.path.join(os.getcwd(), 'logs')
		if not os.path.isdir(logdir):
			sys.exit('./logs/ not found')
		elif args.l:
			files.append(os.path.join(logdir, get_latest_log(logdir)))
		elif args.L:
			files.extend([os.path.join(logdir, f)
				for f in get_latest_run_logs(logdir)])
	else:
		sys.exit('No files specified')

	if args.o:
		plotdir = os.path.join(os.getcwd(), 'plots')
		if not (os.path.isdir(plotdir) and os.access(plotdir, os.W_OK)):
			sys.exit('Output directory {} not accessible'.format(plotdir))

	print('Plot queue: {}'.format(files))
	for f in files:
		vals = parse_file(f)
		if vals:
			plotpath = os.path.join(plotdir,
					'{}.png'.format(os.path.basename(f))) if args.o else None
			plot(*vals, output_image=plotpath)

if __name__ == '__main__':
	main()


